// <auto-generated />
using System;
using EXE.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EXE.Migrations
{
    [DbContext(typeof(Exe201Context))]
    partial class Exe201ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EXE.DataAccess.NumberOfPage", b =>
                {
                    b.Property<int>("NumberId")
                        .HasColumnType("int")
                        .HasColumnName("numberID");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Money")
                        .HasColumnType("money")
                        .HasColumnName("money");

                    b.Property<int?>("Number")
                        .HasColumnType("int")
                        .HasColumnName("number");

                    b.HasKey("NumberId");

                    b.ToTable("NumberOfPage", (string)null);
                });

            modelBuilder.Entity("EXE.DataAccess.Paper", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paper_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaperId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image");

                    b.Property<decimal?>("Money")
                        .HasColumnType("money")
                        .HasColumnName("money");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("PaperId");

                    b.ToTable("paper", (string)null);
                });

            modelBuilder.Entity("EXE.DataAccess.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("money")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("payment_date");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int")
                        .HasColumnName("payment_method");

                    b.Property<int?>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("transaction_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("PaymentId");

                    b.HasIndex(new[] { "UserId" }, "IX_Payments_user_id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EXE.DataAccess.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<string>("Describe")
                        .HasColumnType("text")
                        .HasColumnName("describe");

                    b.Property<string>("Image")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<int?>("NumberId")
                        .HasColumnType("int")
                        .HasColumnName("numberID");

                    b.Property<int?>("PaperId")
                        .HasColumnType("int")
                        .HasColumnName("paper_id");

                    b.Property<int?>("SizeId")
                        .HasColumnType("int")
                        .HasColumnName("Size_id");

                    b.Property<int?>("SpringId")
                        .HasColumnType("int")
                        .HasColumnName("spring_id");

                    b.Property<decimal?>("Total")
                        .HasColumnType("money")
                        .HasColumnName("total");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectId");

                    b.HasIndex("NumberId");

                    b.HasIndex(new[] { "SizeId" }, "IX_Projects_Size_id");

                    b.HasIndex(new[] { "PaperId" }, "IX_Projects_paper_id");

                    b.HasIndex(new[] { "SpringId" }, "IX_Projects_spring_id");

                    b.HasIndex(new[] { "UserId" }, "IX_Projects_user_id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("EXE.DataAccess.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("size_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Money")
                        .HasColumnType("money")
                        .HasColumnName("money");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Ratio")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ratio");

                    b.HasKey("SizeId");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("EXE.DataAccess.Spring", b =>
                {
                    b.Property<int>("SpringId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Spring_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpringId"));

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("color");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("Money")
                        .HasColumnType("money")
                        .HasColumnName("money");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.HasKey("SpringId");

                    b.ToTable("spring", (string)null);
                });

            modelBuilder.Entity("EXE.DataAccess.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("avatar");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("facebook_id");

                    b.Property<string>("Gmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("gmail");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(100)
                        .HasColumnType("nchar(100)")
                        .HasColumnName("google_id")
                        .IsFixedLength();

                    b.Property<string>("Password")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("password");

                    b.Property<int?>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EXE.DataAccess.UserSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("session_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SessionId"));

                    b.Property<string>("AccessToken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("access_token");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("datetime")
                        .HasColumnName("expire_time");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId");

                    b.HasIndex(new[] { "UserId" }, "IX_User_Sessions_user_id");

                    b.ToTable("User_Sessions", (string)null);
                });

            modelBuilder.Entity("EXE.DataAccess.Payment", b =>
                {
                    b.HasOne("EXE.DataAccess.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Payments_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE.DataAccess.Project", b =>
                {
                    b.HasOne("EXE.DataAccess.NumberOfPage", "Number")
                        .WithMany("Projects")
                        .HasForeignKey("NumberId")
                        .HasConstraintName("FK_users_numberID");

                    b.HasOne("EXE.DataAccess.Paper", "Paper")
                        .WithMany("Projects")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("FK_Projects_paper");

                    b.HasOne("EXE.DataAccess.Size", "Size")
                        .WithMany("Projects")
                        .HasForeignKey("SizeId")
                        .HasConstraintName("FK_Projects_Size");

                    b.HasOne("EXE.DataAccess.Spring", "Spring")
                        .WithMany("Projects")
                        .HasForeignKey("SpringId")
                        .HasConstraintName("FK_Projects_spring");

                    b.HasOne("EXE.DataAccess.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Projects_Users");

                    b.Navigation("Number");

                    b.Navigation("Paper");

                    b.Navigation("Size");

                    b.Navigation("Spring");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE.DataAccess.UserSession", b =>
                {
                    b.HasOne("EXE.DataAccess.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_User_Sessions_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EXE.DataAccess.NumberOfPage", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EXE.DataAccess.Paper", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EXE.DataAccess.Size", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EXE.DataAccess.Spring", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EXE.DataAccess.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Projects");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
